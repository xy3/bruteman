# Method can be post or get
method: post
# URL for the requests
url: https://example.com/login
# The type of response the server returns. Can be text or json
response_type: json
# The text keyword or json key that is present in a successful server response
success_keyword: '"success":true'

# You can set headers here to bypass origin, referer and user-agent restrictions.
headers:
  Host: auth.example.com
  X-Application: Example WebApp/1.23.4
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
  Origin: https://example.com
  Referer: https://example.com/

# Define the pattern of the login combinations you wish to use.
# You can use any of the following : | ; as a delimiter.
# Different types of delimiters cannot be used in the same pattern
pattern: 'email:password'

# data_format defines the keys and values of the request data.
# If you defined your pattern as email:password, you can use them 
# here as if they were variable names. 

data_format:
  timestamp: time         # time is a magic keyword that will be replaced with the current timestamp
  nameOrEmail: email
  rawpw: password
  hashedpw: md5 password  # md5 is a magic keyword that md5 hashes the ensuing token

# For example; 'admin@email.com:Password123' parsed with the pattern 'email:password'
# would result in the following:

# data_format:
#   timestamp: 1585621762
#   nameOrEmail: admin@email.com
#   rawpw: Password123
#   hashedpw: 42f749ade7f9e195bf475f37a44cafcb


# Define the number of threads you wish to use
threads: 60